// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/grpc/syncservice.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncServiceClient is the client API for SyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncServiceClient interface {
	SyncMesh(ctx context.Context, opts ...grpc.CallOption) (SyncService_SyncMeshClient, error)
}

type syncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncServiceClient(cc grpc.ClientConnInterface) SyncServiceClient {
	return &syncServiceClient{cc}
}

func (c *syncServiceClient) SyncMesh(ctx context.Context, opts ...grpc.CallOption) (SyncService_SyncMeshClient, error) {
	stream, err := c.cc.NewStream(ctx, &SyncService_ServiceDesc.Streams[0], "/syncservice.SyncService/SyncMesh", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncServiceSyncMeshClient{stream}
	return x, nil
}

type SyncService_SyncMeshClient interface {
	Send(*SyncMeshRequest) error
	Recv() (*SyncMeshReply, error)
	grpc.ClientStream
}

type syncServiceSyncMeshClient struct {
	grpc.ClientStream
}

func (x *syncServiceSyncMeshClient) Send(m *SyncMeshRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *syncServiceSyncMeshClient) Recv() (*SyncMeshReply, error) {
	m := new(SyncMeshReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SyncServiceServer is the server API for SyncService service.
// All implementations must embed UnimplementedSyncServiceServer
// for forward compatibility
type SyncServiceServer interface {
	SyncMesh(SyncService_SyncMeshServer) error
	mustEmbedUnimplementedSyncServiceServer()
}

// UnimplementedSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSyncServiceServer struct {
}

func (UnimplementedSyncServiceServer) SyncMesh(SyncService_SyncMeshServer) error {
	return status.Errorf(codes.Unimplemented, "method SyncMesh not implemented")
}
func (UnimplementedSyncServiceServer) mustEmbedUnimplementedSyncServiceServer() {}

// UnsafeSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServiceServer will
// result in compilation errors.
type UnsafeSyncServiceServer interface {
	mustEmbedUnimplementedSyncServiceServer()
}

func RegisterSyncServiceServer(s grpc.ServiceRegistrar, srv SyncServiceServer) {
	s.RegisterService(&SyncService_ServiceDesc, srv)
}

func _SyncService_SyncMesh_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncServiceServer).SyncMesh(&syncServiceSyncMeshServer{stream})
}

type SyncService_SyncMeshServer interface {
	Send(*SyncMeshReply) error
	Recv() (*SyncMeshRequest, error)
	grpc.ServerStream
}

type syncServiceSyncMeshServer struct {
	grpc.ServerStream
}

func (x *syncServiceSyncMeshServer) Send(m *SyncMeshReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *syncServiceSyncMeshServer) Recv() (*SyncMeshRequest, error) {
	m := new(SyncMeshRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SyncService_ServiceDesc is the grpc.ServiceDesc for SyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syncservice.SyncService",
	HandlerType: (*SyncServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncMesh",
			Handler:       _SyncService_SyncMesh_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/grpc/syncservice.proto",
}
